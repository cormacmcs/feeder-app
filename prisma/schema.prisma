// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" // NOTE: sqlite does not work with NextAuth.js
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    feeding       Feeding[]
    ownedPet      Pet[]     @relation("owned")
    fedPet        Pet[]
}

model Pet {
    id        String    @id @default(cuid())
    name      String
    feeds     Feeding[]
    updatedAt DateTime  @default(now()) @updatedAt
    owner     User      @relation(name: "owned", fields: [userId], references: [id])
    userId    String
    feeder    User[]

    @@unique([name, userId])
}

model Feeding {
    id         String   @id @default(cuid())
    Pet        Pet?     @relation(fields: [petId], references: [id])
    petId      String?
    createdAt  DateTime @default(now())
    Feeder     User     @relation(fields: [userId], references: [id])
    userId     String
    amountPerc Int
    type       FoodType @relation(fields: [foodTypeId], references: [id])
    foodTypeId String
}

model FoodType {
    id      String    @id @default(cuid())
    name    String
    volumn  Int
    Feeding Feeding[]
}
